#!/usr/bin/env bash

# LLM Environment Management Tool
# Manages prompts, rules, and settings across different LLM tools

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LLMENV_ROOT="$(dirname "$SCRIPT_DIR")"

# Configuration
CLAUDE_DIR="$HOME/.claude"
CURSOR_RULES_DIR=".cursor/rules"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Utility functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Show usage
show_usage() {
    cat << EOF
LLM Environment Management Tool

Usage: llmenv <command> [options]

Commands:
  install [language]    Install base configuration or language-specific rules
  uninstall [language]  Remove configuration or language-specific rules
  list                  List available languages and current installations
  status               Show current configuration status
  help                 Show this help message

Examples:
  llmenv install           # Install base configuration for all tools
  llmenv install ruby      # Install Ruby-specific rules
  llmenv install typescript react  # Install multiple language rules
  llmenv uninstall ruby   # Remove Ruby-specific rules
  llmenv list             # Show available languages
  llmenv status           # Show current setup

Supported Languages:
  ruby, typescript, react, terraform

Supported Tools:
  - Claude (global ~/.claude/CLAUDE.md)
  - Cursor (project-local .cursor/rules/)
EOF
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Create directory if it doesn't exist
ensure_dir() {
    local dir="$1"
    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir"
        log_info "Created directory: $dir"
    fi
}

# Process include statements in template files
process_includes() {
    local template_file="$1"
    local output_file="$2"
    
    # Read the template and process includes
    while IFS= read -r line; do
        if [[ $line =~ ^[[:space:]]*\<!--[[:space:]]*include:[[:space:]]*([^[:space:]]+)[[:space:]]*--\> ]]; then
            local include_path="${BASH_REMATCH[1]}"
            local full_path="$(dirname "$template_file")/$include_path"
            
            if [[ -f "$full_path" ]]; then
                cat "$full_path"
                echo ""  # Add newline after include
            else
                log_warn "Include file not found: $full_path"
                echo "$line"
            fi
        else
            echo "$line"
        fi
    done < "$template_file" > "$output_file"
}

# Install base configuration
install_base() {
    log_info "Installing base LLM environment configuration..."
    
    # Install Claude configuration
    ensure_dir "$CLAUDE_DIR"
    local claude_template="$LLMENV_ROOT/templates/claude/CLAUDE.md"
    local claude_output="$CLAUDE_DIR/CLAUDE.md"
    
    if [[ -f "$claude_template" ]]; then
        process_includes "$claude_template" "$claude_output"
        log_info "Installed Claude configuration: $claude_output"
    else
        log_error "Claude template not found: $claude_template"
        return 1
    fi
    
    log_info "Base configuration installed successfully!"
}

# Install language-specific rules
install_language() {
    local language="$1"
    local language_file="$LLMENV_ROOT/blocks/languages/$language.md"
    
    if [[ ! -f "$language_file" ]]; then
        log_error "Language '$language' not supported. Run 'llmenv list' to see available languages."
        return 1
    fi
    
    log_info "Installing $language rules..."
    
    # Update Claude configuration
    local claude_config="$CLAUDE_DIR/CLAUDE.md"
    if [[ -f "$claude_config" ]]; then
        # Add language include to Claude config
        local include_marker="<!-- language-includes-start -->"
        local include_line="<!-- include: $LLMENV_ROOT/blocks/languages/$language.md -->"
        
        if ! grep -q "$include_line" "$claude_config"; then
            # Insert the include after the marker
            sed -i.bak "/$include_marker/a\\
$include_line
" "$claude_config"
            rm "$claude_config.bak"
            log_info "Added $language rules to Claude configuration"
        fi
    fi
    
    # Install Cursor rules if in a project directory
    if [[ -d ".git" ]] || [[ -f "package.json" ]] || [[ -f "Gemfile" ]] || [[ -f "main.tf" ]]; then
        ensure_dir "$CURSOR_RULES_DIR"
        
        # Copy gitignore if it doesn't exist
        if [[ ! -f "$CURSOR_RULES_DIR/.gitignore" ]]; then
            cp "$LLMENV_ROOT/templates/cursor/.gitignore" "$CURSOR_RULES_DIR/"
            log_info "Added .gitignore to cursor rules directory"
        fi
        
        # Create language-specific rules file
        local cursor_rules="$CURSOR_RULES_DIR/$language-rules.md"
        cat > "$cursor_rules" << EOF
# $language Rules for Cursor

@file:$LLMENV_ROOT/blocks/languages/$language.md
EOF
        log_info "Installed $language rules for Cursor: $cursor_rules"
    fi
    
    log_info "$language rules installed successfully!"
}

# Install command handler
cmd_install() {
    if [[ $# -eq 0 ]]; then
        install_base
    else
        # Install base first if it doesn't exist
        if [[ ! -f "$CLAUDE_DIR/CLAUDE.md" ]]; then
            install_base
        fi
        
        # Install each language specified
        for language in "$@"; do
            install_language "$language"
        done
    fi
}

# List available languages
cmd_list() {
    echo "Available languages:"
    for lang_file in "$LLMENV_ROOT/blocks/languages"/*.md; do
        if [[ -f "$lang_file" ]]; then
            local lang_name="$(basename "$lang_file" .md)"
            echo "  - $lang_name"
        fi
    done
    
    echo ""
    echo "Current installations:"
    
    # Check Claude
    if [[ -f "$CLAUDE_DIR/CLAUDE.md" ]]; then
        echo "  Claude: ✓ Installed"
        # Check for language includes
        local includes=$(grep -o "blocks/languages/[^.]*\.md" "$CLAUDE_DIR/CLAUDE.md" 2>/dev/null | sed 's|blocks/languages/||; s|\.md||' | sort -u)
        if [[ -n "$includes" ]]; then
            echo "    Languages: $includes"
        fi
    else
        echo "  Claude: ✗ Not installed"
    fi
    
    # Check Cursor
    if [[ -d "$CURSOR_RULES_DIR" ]]; then
        echo "  Cursor: ✓ Installed"
        local cursor_langs=$(ls "$CURSOR_RULES_DIR"/*-rules.md 2>/dev/null | sed 's|.*/||; s|-rules\.md||' | sort | tr '\n' ' ')
        if [[ -n "$cursor_langs" ]]; then
            echo "    Languages: $cursor_langs"
        fi
    else
        echo "  Cursor: ✗ Not installed (run in project directory)"
    fi
}

# Show status
cmd_status() {
    echo "LLM Environment Status"
    echo "======================"
    echo ""
    
    echo "LLMENV_ROOT: $LLMENV_ROOT"
    echo "Claude config: $CLAUDE_DIR/CLAUDE.md"
    echo "Cursor rules: $CURSOR_RULES_DIR"
    echo ""
    
    cmd_list
}

# Main command dispatcher
main() {
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 1
    fi
    
    case "$1" in
        install)
            shift
            cmd_install "$@"
            ;;
        uninstall)
            shift
            log_warn "Uninstall command not yet implemented"
            exit 1
            ;;
        list)
            cmd_list
            ;;
        status)
            cmd_status
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

main "$@"